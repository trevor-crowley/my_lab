// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mandelbrot,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.567000,HLS_SYN_LAT=6662,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=25,HLS_SYN_FF=1936,HLS_SYN_LUT=1779}" *)

module mandelbrot (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        re,
        im,
        outp,
        outp_ap_vld
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] re;
input  [63:0] im;
output  [15:0] outp;
output   outp_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg outp_ap_vld;

(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_132_p2;
reg   [63:0] reg_152;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state26;
wire   [63:0] grp_fu_126_p2;
reg   [63:0] reg_159;
reg   [63:0] tmp_reg_251;
wire    ap_CS_fsm_state5;
wire   [63:0] grp_fu_138_p2;
reg   [63:0] tmp_1_reg_256;
wire   [8:0] i_1_fu_173_p2;
reg   [8:0] i_1_reg_264;
wire    ap_CS_fsm_state7;
reg   [63:0] tmp_9_reg_269;
wire    ap_CS_fsm_state21;
reg   [63:0] tmp_11_reg_276;
reg   [63:0] tmp_12_reg_282;
wire    ap_CS_fsm_state31;
wire   [8:0] tmp_15_fu_229_p2;
wire    ap_CS_fsm_state32;
reg   [8:0] mandelbrot_double_d_reg_63;
wire    ap_CS_fsm_state6;
reg   [63:0] tmp_2_reg_75;
reg   [63:0] tmp_3_reg_85;
reg   [63:0] tmp_4_reg_95;
reg   [63:0] tmp_5_reg_105;
reg   [8:0] i_reg_115;
wire   [0:0] exitcond_fu_167_p2;
reg   [63:0] grp_fu_126_p0;
reg   [63:0] grp_fu_126_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state27;
reg   [63:0] grp_fu_132_p0;
reg   [63:0] grp_fu_132_p1;
wire    ap_CS_fsm_state22;
reg   [63:0] grp_fu_138_p0;
reg   [63:0] grp_fu_138_p1;
wire   [63:0] tmp_12_to_int_fu_184_p1;
wire   [10:0] tmp_13_fu_187_p4;
wire   [51:0] tmp_14_fu_197_p1;
wire   [0:0] notrhs_fu_207_p2;
wire   [0:0] notlhs_fu_201_p2;
wire   [0:0] tmp_16_fu_213_p2;
wire   [0:0] tmp_17_fu_147_p2;
wire   [0:0] tmp_18_fu_219_p2;
wire   [8:0] tmp_14_cast_fu_225_p1;
reg   [1:0] grp_fu_126_opcode;
reg   [31:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
end

mandelbrot_dadddsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dadddsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_126_p0),
    .din1(grp_fu_126_p1),
    .opcode(grp_fu_126_opcode),
    .ce(1'b1),
    .dout(grp_fu_126_p2)
);

mandelbrot_dmul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dmul_6cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_132_p0),
    .din1(grp_fu_132_p1),
    .ce(1'b1),
    .dout(grp_fu_132_p2)
);

mandelbrot_dmul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dmul_6cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_138_p0),
    .din1(grp_fu_138_p1),
    .ce(1'b1),
    .dout(grp_fu_138_p2)
);

mandelbrot_dcmp_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
mandelbrot_dcmp_6dEe_U4(
    .din0(tmp_12_reg_282),
    .din1(64'd4616189618054758400),
    .opcode(5'd5),
    .dout(tmp_17_fu_147_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        i_reg_115 <= i_1_reg_264;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_115 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        mandelbrot_double_d_reg_63 <= tmp_15_fu_229_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        mandelbrot_double_d_reg_63 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_2_reg_75 <= tmp_11_reg_276;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_2_reg_75 <= tmp_1_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_3_reg_85 <= reg_152;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_3_reg_85 <= tmp_reg_251;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_4_reg_95 <= tmp_9_reg_269;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_4_reg_95 <= im;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_5_reg_105 <= reg_159;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_5_reg_105 <= re;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_264 <= i_1_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_152 <= grp_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_159 <= grp_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_11_reg_276 <= grp_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        tmp_12_reg_282 <= grp_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_1_reg_256 <= grp_fu_138_p2;
        tmp_reg_251 <= grp_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_9_reg_269 <= grp_fu_126_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_167_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_167_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_167_p2 == 1'd0))) begin
        grp_fu_126_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_126_opcode = 2'd0;
    end else begin
        grp_fu_126_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_126_p0 = reg_152;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_126_p0 = reg_159;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_126_p0 = tmp_3_reg_85;
    end else begin
        grp_fu_126_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_126_p1 = tmp_11_reg_276;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_126_p1 = im;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_126_p1 = re;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_126_p1 = tmp_2_reg_75;
    end else begin
        grp_fu_126_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_132_p0 = reg_159;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_132_p0 = reg_152;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_132_p0 = tmp_5_reg_105;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_132_p0 = re;
    end else begin
        grp_fu_132_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_132_p1 = reg_159;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_132_p1 = tmp_4_reg_95;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_132_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_132_p1 = re;
    end else begin
        grp_fu_132_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_138_p0 = tmp_9_reg_269;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_138_p0 = im;
    end else begin
        grp_fu_138_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_138_p1 = tmp_9_reg_269;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_138_p1 = im;
    end else begin
        grp_fu_138_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_167_p2 == 1'd1))) begin
        outp_ap_vld = 1'b1;
    end else begin
        outp_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_167_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign exitcond_fu_167_p2 = ((i_reg_115 == 9'd256) ? 1'b1 : 1'b0);

assign i_1_fu_173_p2 = (i_reg_115 + 9'd1);

assign notlhs_fu_201_p2 = ((tmp_13_fu_187_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notrhs_fu_207_p2 = ((tmp_14_fu_197_p1 == 52'd0) ? 1'b1 : 1'b0);

assign outp = mandelbrot_double_d_reg_63;

assign tmp_12_to_int_fu_184_p1 = tmp_12_reg_282;

assign tmp_13_fu_187_p4 = {{tmp_12_to_int_fu_184_p1[62:52]}};

assign tmp_14_cast_fu_225_p1 = tmp_18_fu_219_p2;

assign tmp_14_fu_197_p1 = tmp_12_to_int_fu_184_p1[51:0];

assign tmp_15_fu_229_p2 = (tmp_14_cast_fu_225_p1 + mandelbrot_double_d_reg_63);

assign tmp_16_fu_213_p2 = (notrhs_fu_207_p2 | notlhs_fu_201_p2);

assign tmp_18_fu_219_p2 = (tmp_17_fu_147_p2 & tmp_16_fu_213_p2);

endmodule //mandelbrot
