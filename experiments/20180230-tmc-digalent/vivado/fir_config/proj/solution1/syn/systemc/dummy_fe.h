// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dummy_fe_HH_
#define _dummy_fe_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct dummy_fe : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > in_V_dout;
    sc_in< sc_logic > in_V_empty_n;
    sc_out< sc_logic > in_V_read;
    sc_out< sc_lv<16> > out_V_din;
    sc_in< sc_logic > out_V_full_n;
    sc_out< sc_logic > out_V_write;
    sc_out< sc_lv<8> > config_out_V_din;
    sc_in< sc_logic > config_out_V_full_n;
    sc_out< sc_logic > config_out_V_write;
    sc_in< sc_lv<8> > config_in_V;


    // Module declarations
    dummy_fe(sc_module_name name);
    SC_HAS_PROCESS(dummy_fe);

    ~dummy_fe();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > tmp_fu_145_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< sc_lv<1> > do_init_reg_109;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_logic > in_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > out_V_blk_n;
    sc_signal< sc_logic > config_out_V_blk_n;
    sc_signal< sc_lv<5> > i1_reg_125;
    sc_signal< sc_lv<8> > config_in_V_read_reg_153;
    sc_signal< sc_lv<1> > ap_phi_mux_do_init_phi_fu_113_p6;
    sc_signal< sc_lv<5> > i_fu_139_p2;
    sc_signal< sc_lv<5> > i_reg_158;
    sc_signal< sc_lv<1> > tmp_reg_163;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<5> > ap_phi_mux_i1_phi_fu_129_p6;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_78;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<5> ap_const_lv5_14;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_78();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_phi_mux_do_init_phi_fu_113_p6();
    void thread_ap_phi_mux_i1_phi_fu_129_p6();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_config_out_V_blk_n();
    void thread_config_out_V_din();
    void thread_config_out_V_write();
    void thread_i_fu_139_p2();
    void thread_in_V_blk_n();
    void thread_in_V_read();
    void thread_out_V_blk_n();
    void thread_out_V_din();
    void thread_out_V_write();
    void thread_tmp_fu_145_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
