// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mandelbrot_frame_HH_
#define _mandelbrot_frame_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct mandelbrot_frame : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<24> > video_out_TDATA;
    sc_out< sc_logic > video_out_TVALID;
    sc_in< sc_logic > video_out_TREADY;
    sc_out< sc_lv<3> > video_out_TKEEP;
    sc_out< sc_lv<3> > video_out_TSTRB;
    sc_out< sc_lv<1> > video_out_TUSER;
    sc_out< sc_lv<1> > video_out_TLAST;
    sc_out< sc_lv<1> > video_out_TID;
    sc_out< sc_lv<1> > video_out_TDEST;


    // Module declarations
    mandelbrot_frame(sc_module_name name);
    SC_HAS_PROCESS(mandelbrot_frame);

    ~mandelbrot_frame();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > video_out_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond_fu_141_p2;
    sc_signal< sc_lv<19> > y_cast2_fu_125_p1;
    sc_signal< sc_lv<19> > y_cast2_reg_203;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<9> > y_1_fu_135_p2;
    sc_signal< sc_lv<9> > y_1_reg_211;
    sc_signal< sc_lv<10> > x_1_fu_147_p2;
    sc_signal< sc_logic > ap_sig_ioackin_video_out_TREADY;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_lv<19> > next_mul_fu_153_p2;
    sc_signal< sc_lv<9> > y_reg_91;
    sc_signal< sc_lv<10> > x_reg_103;
    sc_signal< sc_lv<1> > exitcond1_fu_129_p2;
    sc_signal< sc_lv<19> > phi_mul_reg_114;
    sc_signal< sc_logic > ap_reg_ioackin_video_out_TREADY;
    sc_signal< sc_lv<9> > tmp_fu_163_p1;
    sc_signal< sc_lv<1> > tmp_3_fu_173_p3;
    sc_signal< sc_lv<9> > tmp_2_fu_167_p2;
    sc_signal< sc_lv<10> > tmp_1_fu_181_p3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<19> ap_const_lv19_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<9> ap_const_lv9_1E0;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<10> ap_const_lv10_280;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<10> ap_const_lv10_27F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state3_io();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_video_out_TREADY();
    void thread_exitcond1_fu_129_p2();
    void thread_exitcond_fu_141_p2();
    void thread_next_mul_fu_153_p2();
    void thread_tmp_1_fu_181_p3();
    void thread_tmp_2_fu_167_p2();
    void thread_tmp_3_fu_173_p3();
    void thread_tmp_fu_163_p1();
    void thread_video_out_TDATA();
    void thread_video_out_TDATA_blk_n();
    void thread_video_out_TDEST();
    void thread_video_out_TID();
    void thread_video_out_TKEEP();
    void thread_video_out_TLAST();
    void thread_video_out_TSTRB();
    void thread_video_out_TUSER();
    void thread_video_out_TVALID();
    void thread_x_1_fu_147_p2();
    void thread_y_1_fu_135_p2();
    void thread_y_cast2_fu_125_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
