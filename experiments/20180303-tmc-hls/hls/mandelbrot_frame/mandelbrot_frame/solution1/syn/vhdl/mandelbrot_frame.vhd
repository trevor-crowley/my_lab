-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mandelbrot_frame is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    video_out_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    video_out_TVALID : OUT STD_LOGIC;
    video_out_TREADY : IN STD_LOGIC;
    video_out_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    video_out_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of mandelbrot_frame is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mandelbrot_frame,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.903750,HLS_SYN_LAT=308161,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=60,HLS_SYN_LUT=201}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_27F : STD_LOGIC_VECTOR (9 downto 0) := "1001111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal video_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_cast2_fu_125_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal y_cast2_reg_203 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal y_1_fu_135_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_reg_211 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_1_fu_147_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_ioackin_video_out_TREADY : STD_LOGIC;
    signal ap_block_state3_io : BOOLEAN;
    signal next_mul_fu_153_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal y_reg_91 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_reg_103 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_114 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_reg_ioackin_video_out_TREADY : STD_LOGIC := '0';
    signal tmp_fu_163_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_173_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_167_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_181_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_video_out_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_video_out_TREADY <= ap_const_logic_0;
            else
                if (((exitcond_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    if ((ap_const_boolean_0 = ap_block_state3_io)) then 
                        ap_reg_ioackin_video_out_TREADY <= ap_const_logic_0;
                    elsif ((video_out_TREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_video_out_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    phi_mul_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_114 <= ap_const_lv19_0;
            elsif (((ap_const_boolean_0 = ap_block_state3_io) and (exitcond_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_114 <= next_mul_fu_153_p2;
            end if; 
        end if;
    end process;

    x_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_reg_103 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_state3_io) and (exitcond_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_reg_103 <= x_1_fu_147_p2;
            end if; 
        end if;
    end process;

    y_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_io) and (exitcond_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_reg_91 <= y_1_reg_211;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_reg_91 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                y_1_reg_211 <= y_1_fu_135_p2;
                    y_cast2_reg_203(8 downto 0) <= y_cast2_fu_125_p1(8 downto 0);
            end if;
        end if;
    end process;
    y_cast2_reg_203(18 downto 9) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond_fu_141_p2, ap_CS_fsm_state2, ap_block_state3_io, exitcond1_fu_129_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (exitcond_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_boolean_0 = ap_block_state3_io) and (exitcond_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state3_io_assign_proc : process(exitcond_fu_141_p2, ap_sig_ioackin_video_out_TREADY)
    begin
                ap_block_state3_io <= ((exitcond_fu_141_p2 = ap_const_lv1_0) and (ap_sig_ioackin_video_out_TREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_129_p2)
    begin
        if (((exitcond1_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_129_p2)
    begin
        if (((exitcond1_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_video_out_TREADY_assign_proc : process(video_out_TREADY, ap_reg_ioackin_video_out_TREADY)
    begin
        if ((ap_reg_ioackin_video_out_TREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_video_out_TREADY <= video_out_TREADY;
        else 
            ap_sig_ioackin_video_out_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond1_fu_129_p2 <= "1" when (y_reg_91 = ap_const_lv9_1E0) else "0";
    exitcond_fu_141_p2 <= "1" when (x_reg_103 = ap_const_lv10_280) else "0";
    next_mul_fu_153_p2 <= std_logic_vector(unsigned(y_cast2_reg_203) + unsigned(phi_mul_reg_114));
    tmp_1_fu_181_p3 <= (tmp_3_fu_173_p3 & tmp_2_fu_167_p2);
    tmp_2_fu_167_p2 <= (y_reg_91 or tmp_fu_163_p1);
    tmp_3_fu_173_p3 <= x_reg_103(9 downto 9);
    tmp_fu_163_p1 <= x_reg_103(9 - 1 downto 0);
    video_out_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_114),24));

    video_out_TDATA_blk_n_assign_proc : process(video_out_TREADY, ap_CS_fsm_state3, exitcond_fu_141_p2)
    begin
        if (((exitcond_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            video_out_TDATA_blk_n <= video_out_TREADY;
        else 
            video_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    video_out_TDEST <= ap_const_lv1_0;
    video_out_TID <= ap_const_lv1_0;
    video_out_TKEEP <= ap_const_lv3_0;
    video_out_TLAST <= "1" when (x_reg_103 = ap_const_lv10_27F) else "0";
    video_out_TSTRB <= ap_const_lv3_0;
    video_out_TUSER <= "1" when (tmp_1_fu_181_p3 = ap_const_lv10_0) else "0";

    video_out_TVALID_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_141_p2, ap_reg_ioackin_video_out_TREADY)
    begin
        if (((exitcond_fu_141_p2 = ap_const_lv1_0) and (ap_reg_ioackin_video_out_TREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            video_out_TVALID <= ap_const_logic_1;
        else 
            video_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    x_1_fu_147_p2 <= std_logic_vector(unsigned(x_reg_103) + unsigned(ap_const_lv10_1));
    y_1_fu_135_p2 <= std_logic_vector(unsigned(y_reg_91) + unsigned(ap_const_lv9_1));
    y_cast2_fu_125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_91),19));
end behav;
