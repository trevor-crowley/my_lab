// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mandelbrot_frame,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.903750,HLS_SYN_LAT=308161,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=60,HLS_SYN_LUT=201}" *)

module mandelbrot_frame (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        video_out_TDATA,
        video_out_TVALID,
        video_out_TREADY,
        video_out_TKEEP,
        video_out_TSTRB,
        video_out_TUSER,
        video_out_TLAST,
        video_out_TID,
        video_out_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [23:0] video_out_TDATA;
output   video_out_TVALID;
input   video_out_TREADY;
output  [2:0] video_out_TKEEP;
output  [2:0] video_out_TSTRB;
output  [0:0] video_out_TUSER;
output  [0:0] video_out_TLAST;
output  [0:0] video_out_TID;
output  [0:0] video_out_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg video_out_TVALID;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    video_out_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_141_p2;
wire   [18:0] y_cast2_fu_125_p1;
reg   [18:0] y_cast2_reg_203;
wire    ap_CS_fsm_state2;
wire   [8:0] y_1_fu_135_p2;
reg   [8:0] y_1_reg_211;
wire   [9:0] x_1_fu_147_p2;
reg    ap_sig_ioackin_video_out_TREADY;
reg    ap_block_state3_io;
wire   [18:0] next_mul_fu_153_p2;
reg   [8:0] y_reg_91;
reg   [9:0] x_reg_103;
wire   [0:0] exitcond1_fu_129_p2;
reg   [18:0] phi_mul_reg_114;
reg    ap_reg_ioackin_video_out_TREADY;
wire   [8:0] tmp_fu_163_p1;
wire   [0:0] tmp_3_fu_173_p3;
wire   [8:0] tmp_2_fu_167_p2;
wire   [9:0] tmp_1_fu_181_p3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_reg_ioackin_video_out_TREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_video_out_TREADY <= 1'b0;
    end else begin
        if (((exitcond_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            if ((1'b0 == ap_block_state3_io)) begin
                ap_reg_ioackin_video_out_TREADY <= 1'b0;
            end else if ((video_out_TREADY == 1'b1)) begin
                ap_reg_ioackin_video_out_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_114 <= 19'd0;
    end else if (((1'b0 == ap_block_state3_io) & (exitcond_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_114 <= next_mul_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_reg_103 <= 10'd0;
    end else if (((1'b0 == ap_block_state3_io) & (exitcond_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        x_reg_103 <= x_1_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (exitcond_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        y_reg_91 <= y_1_reg_211;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_reg_91 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_1_reg_211 <= y_1_fu_135_p2;
        y_cast2_reg_203[8 : 0] <= y_cast2_fu_125_p1[8 : 0];
    end
end

always @ (*) begin
    if (((exitcond1_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_video_out_TREADY == 1'b0)) begin
        ap_sig_ioackin_video_out_TREADY = video_out_TREADY;
    end else begin
        ap_sig_ioackin_video_out_TREADY = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        video_out_TDATA_blk_n = video_out_TREADY;
    end else begin
        video_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_fu_141_p2 == 1'd0) & (ap_reg_ioackin_video_out_TREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        video_out_TVALID = 1'b1;
    end else begin
        video_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (exitcond_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b0 == ap_block_state3_io) & (exitcond_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state3_io = ((exitcond_fu_141_p2 == 1'd0) & (ap_sig_ioackin_video_out_TREADY == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_129_p2 = ((y_reg_91 == 9'd480) ? 1'b1 : 1'b0);

assign exitcond_fu_141_p2 = ((x_reg_103 == 10'd640) ? 1'b1 : 1'b0);

assign next_mul_fu_153_p2 = (y_cast2_reg_203 + phi_mul_reg_114);

assign tmp_1_fu_181_p3 = {{tmp_3_fu_173_p3}, {tmp_2_fu_167_p2}};

assign tmp_2_fu_167_p2 = (y_reg_91 | tmp_fu_163_p1);

assign tmp_3_fu_173_p3 = x_reg_103[32'd9];

assign tmp_fu_163_p1 = x_reg_103[8:0];

assign video_out_TDATA = phi_mul_reg_114;

assign video_out_TDEST = 1'd0;

assign video_out_TID = 1'd0;

assign video_out_TKEEP = 3'd0;

assign video_out_TLAST = ((x_reg_103 == 10'd639) ? 1'b1 : 1'b0);

assign video_out_TSTRB = 3'd0;

assign video_out_TUSER = ((tmp_1_fu_181_p3 == 10'd0) ? 1'b1 : 1'b0);

assign x_1_fu_147_p2 = (x_reg_103 + 10'd1);

assign y_1_fu_135_p2 = (y_reg_91 + 9'd1);

assign y_cast2_fu_125_p1 = y_reg_91;

always @ (posedge ap_clk) begin
    y_cast2_reg_203[18:9] <= 10'b0000000000;
end

endmodule //mandelbrot_frame
